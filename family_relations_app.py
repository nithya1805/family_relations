import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Family Relationship Finder", layout="centered")
st.title("ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Family Relationship Finder")

# ЁЯУБ CSV file path
CSV_FILE = "family_relationships.csv"

# ЁЯФв Initial fallback data
initial_data = [
    ["Mother", "рдорд╛рддрд╛ / рдорд╛рдБ"], ["Father", "рдкрд┐рддрд╛ / рдкрд╛рдкрд╛"], ["Son", "рдмреЗрдЯрд╛ / рдкреБрддреНрд░"], ["Daughter", "рдмреЗрдЯреА / рдкреБрддреНрд░реА"],
    ["Brother", "рднрд╛рдИ"], ["Sister", "рдмрд╣рди"], ["Paternal Grandfather", "рджрд╛рджрд╛ / рдмрд╛рдмрд╛"],
    ["Paternal Grandmother", "рджрд╛рджреА"], ["Maternal Grandfather", "рдирд╛рдирд╛"], ["Maternal Grandmother", "рдирд╛рдиреА"],
    ["Paternal Uncle (FatherтАЩs Brother)", "рдЪрд╛рдЪрд╛"], ["Paternal Aunt (UncleтАЩs Wife)", "рдЪрд╛рдЪреА"],
    ["Maternal Uncle (MotherтАЩs Brother)", "рдорд╛рдорд╛"], ["Maternal Aunt (UncleтАЩs Wife)", "рдорд╛рдореА"],
    ["FatherтАЩs Sister", "рдмреБрдЖ"], ["Father's Sister's Husband", "рдлреВрдлрд╛"], ["Mother's Sister's Husband", "рдореМрд╕рд╛"],
    ["Mother's Sister", "рдореМрд╕реА"], ["Father-in-law", "рд╕рд╕реБрд░"], ["Mother-in-law", "рд╕рд╛рд╕"], ["Son-in-law", "рджрд╛рдорд╛рдж"],
    ["Daughter-in-law", "рдмрд╣реВ"], ["Brother-in-law (WifeтАЩs Brother)", "рд╕рд╛рд▓рд╛"],
    ["Sister-in-law (WifeтАЩs Sister)", "рд╕рд╛рд▓реА"], ["Sister-in-law (BrotherтАЩs Wife)", "рднрд╛рднреА"],
    ["Grandson (SonтАЩs child)", "рдкреЛрддрд╛"], ["Granddaughter (SonтАЩs child)", "рдкреЛрддреА"],
    ["Grandson (DaughterтАЩs child)", "рдирд╛рддреА"], ["Granddaughter (DaughterтАЩs child)", "рдирд╛рддрд┐рдиреА"],
    ["Nephew (BrotherтАЩs Son)", "рднрддреАрдЬрд╛"], ["Niece (BrotherтАЩs Daughter)", "рднрддреАрдЬреА"],
    ["Nephew (SisterтАЩs Son)", "рднрд╛рдВрдЬрд╛ / рднрд╛рдиреЗрдЬ"], ["Niece (SisterтАЩs Daughter)", "рднрд╛рдВрдЬреА"],
    ["Step Brother", "рд╕реМрддреЗрд▓рд╛ рднрд╛рдИ"], ["Step Sister", "рд╕реМрддреЗрд▓реА рдмрд╣рди"], ["Step Father", "рд╕реМрддреЗрд▓рд╛ рдкрд┐рддрд╛"],
    ["Step Mother", "рд╕реМрддреЗрд▓реА рдорд╛рдБ"], ["Adopted Son", "рдЧреЛрдж рд▓рд┐рдпрд╛ рдмреЗрдЯрд╛"], ["Adopted Daughter", "рдЧреЛрдж рд▓реА рд╣реБрдИ рдмреЗрдЯреА"],
    ["Cousin Brother (Paternal Uncle's Son)", "рдЪрдЪреЗрд░рд╛ рднрд╛рдИ"], ["Cousin Sister (Paternal Uncle's Daughter)", "рдЪрдЪреЗрд░реА рдмрд╣рди"],
    ["Cousin Brother (Maternal Uncle's Son)", "рдордореЗрд░рд╛ рднрд╛рдИ"], ["Cousin Sister (Maternal Uncle's Daughter)", "рдордореЗрд░реА рдмрд╣рди"],
    ["Cousin Brother (Father's Sister's Son)", "рдлреБрдлреЗрд░рд╛ рднрд╛рдИ"], ["Cousin Sister (Father's Sister's Daughter)", "рдлреБрдлреЗрд░реА рдмрд╣рди"],
    ["Cousin Brother (Mother's Sister's Son)", "рдореМрд╕реЗрд░рд╛ рднрд╛рдИ"], ["Cousin Sister (Mother's Sister's Daughter)", "рдореМрд╕реЗрд░реА рдмрд╣рди"],
    ["Son of Paternal Cousin Brother", "рдЪрдЪреЗрд░рд╛ рднрддреАрдЬрд╛"], ["Daughter of Paternal Cousin Brother", "рдЪрдЪреЗрд░реА рднрддреАрдЬреА"],
    ["Son of Paternal AuntтАЩs Son", "рдлреБрдлреЗрд░рд╛ рднрддреАрдЬрд╛"], ["Daughter of Paternal AuntтАЩs Son", "рдлреБрдлреЗрд░реА рднрддреАрдЬреА"],
    ["father's sister", "рдлреБрд╡рд╛"], ["Brother-in-law", "рдЬреАрдЬрд╛"], ["Wife", "рдкрддреНрдиреА"],
    ["Husband of wifeтАЩs sister", "рд╕рд╛рдврд╝реВ рднрд╛рдИ"], ["Elder brother in law", "рдЬреЗрда"], ["younger brother-in-law", "рджреЗрд╡рд░"],
    ["Great-grandfather (fatherтАЩs fatherтАЩs father)", "рдкрд░рджрд╛рджрд╛ / рдкрд░рдЖрдЬрд╛"], ["FatherтАЩs elder brother", "рддрд╛рдК"],
    ["FatherтАЩs elder brotherтАЩs wife", "рддрд╛рдИ"], ["younger brother's wife (sister-in-law )", "рдирдереА"],
    ["paternal aunt's daughter", "рдлреБрдлреИрд▓реА"], ["Great-grandchild", "рдкрд░рдЖрдЬрд╛"], ["Brother-in-law(sister's husband)", "рдмрд╣рдиреЛрдИ"],
    ["wife of your husband's brother", "рд╕рд░рд╣рдЬ"]
]

# ЁЯУе Load or initialize DataFrame
def load_data():
    if os.path.exists(CSV_FILE):
        return pd.read_csv(CSV_FILE)
    else:
        return pd.DataFrame(initial_data, columns=["English", "Hindi"])

# ЁЯТ╛ Save DataFrame to CSV
def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# ЁЯФБ Load data into session state if not present
if "relation_df" not in st.session_state:
    st.session_state.relation_df = load_data()

if "undo_stack" not in st.session_state:
    st.session_state.undo_stack = []

df = st.session_state.relation_df

# ЁЯФН Search
search = st.text_input("ЁЯФН Search relationship (English or Hindi):")
filtered_df = df.copy()
if search:
    filtered_df = filtered_df[
        filtered_df.apply(
            lambda row: search.lower() in row["English"].lower() or search.lower() in row["Hindi"].lower(),
            axis=1
        )
    ]

st.table(filtered_df)

st.markdown("---")

# тЬПя╕П Edit Relationship
st.subheader("тЬПя╕П Edit Existing Relationship")
relation_options = ["-- Select a relationship --"] + df["English"].tolist()
selected_relation = st.selectbox("Select relationship to edit:", options=relation_options)

if selected_relation != "-- Select a relationship --":
    idx = df[df["English"] == selected_relation].index[0]
    current = df.loc[idx]

    new_english = st.text_input("English Term", value=current["English"], key="edit_eng")
    new_hindi = st.text_input("Hindi Term", value=current["Hindi"], key="edit_hin")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Update Relation"):
            if new_english.strip() and new_hindi.strip():
                df.at[idx, "English"] = new_english.strip()
                df.at[idx, "Hindi"] = new_hindi.strip()
                save_data(df)
                st.success(f"тЬЕ Updated: {new_english} - {new_hindi}")
                st.rerun()
            else:
                st.warning("тЪая╕П Both English and Hindi terms are required.")

    with col2:
        if st.button("Delete Relation"):
            st.session_state.undo_stack.append(df.loc[[idx]])
            df.drop(idx, inplace=True)
            df.reset_index(drop=True, inplace=True)
            save_data(df)
            st.success(f"ЁЯЧСя╕П Deleted: {selected_relation}")
            st.rerun()

st.markdown("---")

# тПк Undo
if st.session_state.undo_stack:
    if st.button("Undo Last Delete"):
        restored_row = st.session_state.undo_stack.pop()
        df = pd.concat([df, restored_row], ignore_index=True)
        save_data(df)
        st.session_state.relation_df = df
        st.success(f"тЬЕ Restored: {restored_row.iloc[0]['English']}")
        st.rerun()

st.markdown("---")

# тЮХ Add Relationship
st.subheader("+ Add New Relationship")
with st.form("add_form"):
    english_term = st.text_input("English Term", key="add_eng")
    hindi_term = st.text_input("Hindi Term", key="add_hin")
    submitted = st.form_submit_button("Add")

    if submitted:
        if english_term.strip() and hindi_term.strip():
            new_row = pd.DataFrame([{"English": english_term.strip(), "Hindi": hindi_term.strip()}])
            df = pd.concat([df, new_row], ignore_index=True)
            save_data(df)
            st.session_state.relation_df = df
            st.success(f"тЬЕ Added: {english_term} - {hindi_term}")
            st.rerun()
        else:
            st.warning("тЪая╕П Please provide both English and Hindi terms.")
